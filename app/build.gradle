apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "kotlin-allopen"

android {
    compileSdkVersion 29

    def codeVersion = 1
    def oldCode = 1
    def runTasks = gradle.startParameter.taskNames
    println('RUNING TASKS: ' + runTasks)

    // SigningConfigs automatically
    println(runTasks + ' - SigningConfigs automatically')
    def keystorePropsFile = file('keystore.properties')
    if (keystorePropsFile.canRead()) {
        Properties keystoreProps = new Properties()

        keystoreProps.load(new FileInputStream(keystorePropsFile))

        def keyAliasValue = keystoreProps['KEY_ALIAS']
        def keyPasswordValue = keystoreProps['KEY_PASSWORD']
        def storeFileValue = keystoreProps['STORE_FILE']
        def storePasswordValue = keystoreProps['STORE_PASSWORD']

        signingConfigs {
            releaseSign {
                keyAlias keyAliasValue
                keyPassword keyPasswordValue
                storeFile file(storeFileValue)
                storePassword storePasswordValue
            }
        }
    } else {
        throw new GradleException("Could not read keystore.properties!")
    }

    // Manage version code
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        oldCode = versionProps['VERSION_CODE'].toInteger()

        if (':app:assembleRelease' in runTasks) {
            // Autoincrement of version code
            println(runTasks + ' Autoincrement of version code')
            codeVersion = oldCode + 1
            println(' * VersionCode for release: ' + oldCode)
        } else {
            // Keep version code
            println(' * VersionCode for debug: ' + oldCode)
            codeVersion = oldCode
        }

        if (codeVersion.toInteger() != oldCode.toInteger()) {
            println('CHANGING VERSION CODE')
            versionProps['VERSION_CODE'] = codeVersion.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    defaultConfig {
        applicationId "com.meleastur.singleactivityrestflikr"
        minSdkVersion minVersion
        targetSdkVersion targetSDK
        versionCode codeVersion
        versionName nameVersion
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        debug {
        }
        integ {
            initWith debug
            signingConfig signingConfigs.releaseSign

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.releaseSign

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'

    // android annotations
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'androidx.annotation:annotation:1.1.0'
    kapt "org.androidannotations:androidannotations:$annotation_version"
    implementation "org.androidannotations:androidannotations-api:$annotation_version"

    // retrofit + gson
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // okhttp
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpClient_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttpClient_version"

    // rx
    implementation "io.reactivex.rxjava2:rxjava:$rxjava2_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxkotlin:2.4.0"

    // dagger2
    implementation "com.google.dagger:dagger:$dagger2_version"
    implementation "com.google.dagger:dagger-android:$dagger2_version"
    implementation "com.google.dagger:dagger-android-support:$dagger2_version"
    kapt "com.google.dagger:dagger-compiler:$dagger2_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger2_version"
    kapt "com.google.dagger:dagger-compiler:$dagger2_version"
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'javax.inject:javax.inject:1'

    // eventBus
    implementation "org.greenrobot:eventbus:$eventBus_version"

    // glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    compile("com.github.bumptech.glide:okhttp3-integration:$glide_version") {
        exclude group: 'glide-parent'
    }

    // StfalconImageViewer
    implementation "com.github.stfalcon:stfalcon-imageviewer:$stfalcon_version"

    // dexter
    implementation "com.karumi:dexter:$dexter_version"

    // security
    //  implementation "androidx.security:security-crypto:$security_version"

    // cameraX
    //  implementation "androidx.camera:camera-core:${camerax_version}"
    //  implementation "androidx.camera:camera-camera2:${camerax_version}"

    // biometric
    implementation "androidx.biometric:biometric:$biometric_version"

    // ui
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support:cardview-v7:$support_version"
    implementation "com.android.support:design:$support_version"
    implementation "com.google.android.material:material:$material_version"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

kapt {
    generateStubs = true
    correctErrorTypes = true
}